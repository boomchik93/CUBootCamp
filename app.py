import os
import random
import string
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import db

SUBJECTS = {
    'russian': 'üìö –†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
    'math': 'üìò –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    'informatics': 'üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
    'biology': 'üçÄ –ë–∏–æ–ª–æ–≥–∏—è',
    'geography': 'üåè –ì–µ–æ–≥—Ä–∞—Ñ–∏—è'
}

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT"))
ADMIN_CHAT_LINK = os.getenv("ADMIN_LIMK")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


class TicketCreatingStates(StatesGroup):
    waiting_for_ticket_subject = State()
    done = State()


class RegistrationStates(StatesGroup):
    waiting_for_role = State()
    waiting_for_grade = State()
    waiting_for_subject = State()
    waiting_for_teacher_code = State()


@dp.message(Command("reregister"))
async def command_reregister(message: types.Message, state: FSMContext):
    await state.clear()

    username = message.from_user.username or str(message.from_user.id)
    user_info = db.get_user_status(username)

    if user_info:
        role = user_info['role']
        if role == 'student':
            db.delete_student(username)
        elif role == 'cooteacher':
            db.delete_cooteacher(username)
        elif role == 'teacher':
            db.delete_teacher(username)
        await message.answer("‚ôªÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        await send_welcome(message)
    else:
        await message.answer("‚ÄºÔ∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")


@dp.callback_query(RegistrationStates.waiting_for_role)
async def process_role(callback_query: types.CallbackQuery, state: FSMContext):
    role = callback_query.data
    await state.update_data(role=role)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"subject_{key}")]
        for key, name in SUBJECTS.items()
    ])

    if role in ['role_teacher', 'role_cooteacher']:
        await callback_query.message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)
        await state.set_state(RegistrationStates.waiting_for_subject)
    elif role == 'role_student':
        await callback_query.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")
        await state.set_state(RegistrationStates.waiting_for_grade)


@dp.message(RegistrationStates.waiting_for_grade)
async def process_grade(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data.get('username')
    if not username:
        username = message.from_user.username or str(message.from_user.id)
        await state.update_data(username=username)

    required_fields = ['first_name', 'second_name', 'phone_num']
    for field in required_fields:
        if field not in data:
            return await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")

    try:
        grade = int(message.text)
        db.add_student(
            username=username,
            first_name=data['first_name'],
            second_name=data['second_name'],
            phone_num=data['phone_num'],
            grade=grade
        )
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        await show_student_menu(message)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞—Å—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 9")


@dp.callback_query(RegistrationStates.waiting_for_subject)
async def process_subject(callback_query: types.CallbackQuery, state: FSMContext):
    subject_key = callback_query.data.replace('subject_', '')
    if subject_key not in SUBJECTS:
        await callback_query.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
        return

    subject_name = SUBJECTS[subject_key]
    await state.update_data(subject=subject_name)
    data = await state.get_data()

    if data['role'] == 'role_teacher':
        db.add_teacher(
            username=data['username'],
            first_name=data['first_name'],
            last_name=data.get('second_name', ''),
            phone_num=data['phone_num'],
            subject=subject_name
        )
        await callback_query.message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await show_teacher_menu(callback_query.message)
        await state.clear()

    elif data['role'] == 'role_cooteacher':
        cancel_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback_query.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∏—Ç–µ–ª—è:", reply_markup=cancel_keyboard)
        await state.set_state(RegistrationStates.waiting_for_teacher_code)


@dp.callback_query(RegistrationStates.waiting_for_teacher_code)
async def cancel_teacher_code(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "cancel_code":
        await state.clear()
        await callback_query.message.answer("üö´ –í–≤–æ–¥ –∫–æ–¥–æ–≤–æ–≥–æ —à–∏—Ñ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")


@dp.message(RegistrationStates.waiting_for_teacher_code)
async def process_teacher_code(message: types.Message, state: FSMContext):
    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        await ask_for_role(message, state)
        return

    code = message.text.strip().upper()
    code_info = db.get_teacher_code_info(code)
    data = await state.get_data()

    if not code_info:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
    if code_info['used']:
        return await message.answer("‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
    if code_info['subject'] != data.get('subject'):
        return await message.answer(f"üö´ –ö–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {code_info['subject']}")

    try:
        db.mark_code_as_used(code)
        db.add_cooteacher(
            data['username'],
            data['first_name'],
            data['second_name'],
            data['phone_num'],
            int(data['grade']),
            data['subject']
        )
        await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–°—Å—ã–ª–∫–∞ –¥–ª—è —á–∞—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {ADMIN_CHAT_LINK}",
                             reply_markup=types.ReplyKeyboardRemove())
        await show_cooteacher_menu(message)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    finally:
        await state.clear()


def generate_unique_code():
    characters = string.ascii_uppercase + string.digits
    code = ''.join(random.choice(characters) for _ in range(5))
    return code


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚òéÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", reply_markup=keyboard)


@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    user_data = {
        'username': message.from_user.username or str(message.contact.user_id),
        'first_name': contact.first_name,
        'second_name': contact.last_name or "",
        'phone_num': contact.phone_number
    }

    await state.update_data(**user_data)

    user_info = db.get_user_status(user_data['username'])
    if user_info:
        await show_profile_by_role(message, user_info)
    else:
        await ask_for_role(message, state)


async def show_profile_by_role(message: types.Message, user_info: dict):
    role = user_info['role']
    data = user_info['data']

    if role == 'student':
        await show_student_profile(message, data)
    elif role == 'cooteacher':
        await show_cooteacher_profile(message, data)
    elif role == 'teacher':
        await show_teacher_profile(message, data)
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


async def ask_for_role(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßëüéì –Ø —É—á–µ–Ω–∏–∫", callback_data="role_student")],
        [InlineKeyboardButton(text="üßëüî¨ –Ø –ø–æ–º–æ—â–Ω–∏–∫ —É—á–∏—Ç–µ–ª—è", callback_data="role_cooteacher")],
        [InlineKeyboardButton(text="üßëüè´ –Ø —É—á–∏—Ç–µ–ª—å", callback_data="role_teacher")]
    ])
    await message.answer("ü¶∫ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)
    await state.set_state(RegistrationStates.waiting_for_role)


@dp.message(Command("reregister"))
async def command_reregister(message: types.Message, state: FSMContext):
    username = message.from_user.username or str(message.from_user.id)
    user_info = db.get_user_status(username)

    if user_info:
        role = user_info['role']
        if role == 'student':
            db.delete_student(username)
        elif role == 'cooteacher':
            db.delete_cooteacher(username)
        elif role == 'teacher':
            db.delete_teacher(username)
        await message.answer("‚ôªÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        await send_welcome(message)
    else:
        await message.answer("‚ÄºÔ∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")


async def show_student_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë®ü¶∞ –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìã –ú–µ–Ω—é —É—á–µ–Ω–∏–∫–∞:", reply_markup=keyboard)


async def show_cooteacher_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"), KeyboardButton(text="üë®ü¶∞ –ê–∫–∫–∞—É–Ω—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer("üßëüî¨ –ú–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞ —É—á–∏—Ç–µ–ª—è:", reply_markup=keyboard)


async def show_teacher_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üî¢ –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥"), KeyboardButton(text="üë®ü¶∞ –ê–∫–∫–∞—É–Ω—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer("üßëüè´ –ú–µ–Ω—é —É—á–∏—Ç–µ–ª—è:", reply_markup=keyboard)


@dp.message(lambda message: message.text == "üë®ü¶∞ –ê–∫–∫–∞—É–Ω—Ç")
async def handle_account(message: types.Message):
    username = message.from_user.username or str(message.from_user.id)
    user_info = db.get_user_status(username)

    if not user_info:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    role_translation = {
        'student': '–£—á–µ–Ω–∏–∫',
        'teacher': '–£—á–∏—Ç–µ–ª—å',
        'cooteacher': '–ü–æ–º–æ—â–Ω–∏–∫ —É—á–∏—Ç–µ–ª—è'
    }

    data = user_info['data']
    role = role_translation.get(user_info['role'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')

    response = "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
    response += f"‚ñ´Ô∏è <b>–†–æ–ª—å:</b> {role}\n"
    response += f"‚ñ´Ô∏è <b>–ò–º—è:</b> {data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    response += f"‚ñ´Ô∏è <b>–§–∞–º–∏–ª–∏—è:</b> {data.get('second_name', data.get('last_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'))}\n"
    response += f"‚ñ´Ô∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone_num', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"

    if user_info['role'] in ['student', 'cooteacher']:
        response += f"‚ñ´Ô∏è <b>–ö–ª–∞—Å—Å:</b> {data.get('grade', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"

    if user_info['role'] in ['teacher', 'cooteacher']:
        response += f"‚ñ´Ô∏è <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {data.get('subject', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"

    await message.answer(response, parse_mode=ParseMode.HTML)


async def show_student_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë®ü¶∞ –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")],
        ],
        resize_keyboard=True
    )
    await message.answer("üìã –ú–µ–Ω—é —É—á–µ–Ω–∏–∫–∞:", reply_markup=keyboard)


async def show_cooteacher_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"), KeyboardButton(text="üë®ü¶∞ –ê–∫–∫–∞—É–Ω—Ç")],
        ],
        resize_keyboard=True
    )
    await message.answer("üßëüî¨ –ú–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞ —É—á–∏—Ç–µ–ª—è:", reply_markup=keyboard)


async def show_teacher_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üî¢ –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥"), KeyboardButton(text="üë®ü¶∞ –ê–∫–∫–∞—É–Ω—Ç")],
        ],
        resize_keyboard=True
    )
    await message.answer("üßëüè´ –ú–µ–Ω—é —É—á–∏—Ç–µ–ª—è:", reply_markup=keyboard)


@dp.message(lambda message: message.text == "üî¢ –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥")
async def handle_generate_code(message: types.Message):
    username = message.from_user.username or str(message.from_user.id)
    teacher_info = db.get_user_status(username)

    if not teacher_info or teacher_info['role'] != 'teacher':
        await message.answer("‚ÄºÔ∏è –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–¥—ã!")
        return

    code = generate_unique_code()
    db.add_teacher_code(
        teacher_id=teacher_info['data']['id'],
        code=code,
        subject=teacher_info['data']['subject']
    )
    await message.answer(f"‚úÖ –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {teacher_info['data']['subject']}:\n<code>{code}</code>")


@dp.message(lambda message: message.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
async def handle_ticket(message: types.Message, state: FSMContext):
    await state.set_state(TicketCreatingStates.waiting_for_ticket_subject)
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")


@dp.message(TicketCreatingStates.waiting_for_ticket_subject)
async def process_ticket_subject(message: types.Message, state: FSMContext):
    await state.update_data(subject=message.text)
    data = await state.get_data()
    ticket = f"""
    ‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}
    –°–æ–æ–±—â–µ–Ω–∏–µ: {data["subject"]}
    """
    await bot.send_message(ADMIN_CHAT_ID, ticket)
    await state.clear()
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç–∞–º!")


@dp.message(lambda message: message.chat.id == ADMIN_CHAT_ID)
async def handle_admin_group(message: types.Message):
    if message.reply_to_message:
        try:
            original_message = message.reply_to_message.text
            ticket_id = int(original_message.split("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")[1].split("\n")[0].strip())

            await bot.send_message(
                chat_id=ticket_id,
                text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:\n{message.text}"
            )
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            print(f"Error processing admin reply: {e}")


async def show_student_profile(message: types.Message, data):
    await show_student_menu(message)


async def show_cooteacher_profile(message: types.Message, data):
    await show_cooteacher_menu(message)


async def show_teacher_profile(message: types.Message, data):
    await show_teacher_menu(message)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        db.init_db()
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!')
